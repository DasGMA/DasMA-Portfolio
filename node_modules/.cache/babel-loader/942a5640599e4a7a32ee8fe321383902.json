{"ast":null,"code":"import { TimelineMax as Timeline, Power1 } from 'gsap';\n\nvar getDefaultTimeline = function getDefaultTimeline(node, delay) {\n  var timeline = new Timeline({\n    paused: true\n  });\n  var content = node.querySelector('.container'); //const contentInner1 = node.querySelectorAll('.carousel, .row, .col, .card');\n\n  timeline.from(node, 0.3, {\n    display: 'none',\n    autoAlpha: 0,\n    delay: delay,\n    ease: Power1.easeIn\n  }).from(content, 0.15, {\n    autoAlpha: 0,\n    y: 25,\n    ease: Power1.easeInOut\n  }); //.from(contentInner1, 0.15, { autoAlpha: 0, delay: 0.15, ease: Power1.easeIn });\n\n  return timeline;\n};\n\nvar getHomeTimeline = function getHomeTimeline(node, delay) {\n  var timeline = new Timeline({\n    paused: true\n  });\n  var content = node.querySelectorAll('h1, h4, h5, p, .contact');\n  timeline.from(node, 0, {\n    display: 'none',\n    autoAlpha: 0,\n    delay: delay\n  }).staggerFrom(content, 0.375, {\n    autoAlpha: 0,\n    x: -25,\n    ease: Power1.easeOut\n  }, 0.125);\n  return timeline;\n};\n\nexport var play = function play(pathname, node, appears) {\n  var delay = appears ? 0 : 0.5;\n  var timeline;\n  if (pathname === '/') timeline = getHomeTimeline(node, delay);else timeline = getDefaultTimeline(node, delay);\n  window.loadPromise.then(function () {\n    return requestAnimationFrame(function () {\n      return timeline.play();\n    });\n  });\n};\nexport var exit = function exit(node) {\n  var timeline = new Timeline({\n    paused: true\n  });\n  timeline.to(node, 0.15, {\n    autoAlpha: 0,\n    ease: Power1.easeOut\n  });\n  timeline.play();\n};","map":{"version":3,"sources":["/home/das/Desktop/DasMA-Portfolio/client/src/Components/timelines/index.js"],"names":["TimelineMax","Timeline","Power1","getDefaultTimeline","node","delay","timeline","paused","content","querySelector","from","display","autoAlpha","ease","easeIn","y","easeInOut","getHomeTimeline","querySelectorAll","staggerFrom","x","easeOut","play","pathname","appears","window","loadPromise","then","requestAnimationFrame","exit","to"],"mappings":"AAAA,SAASA,WAAW,IAAIC,QAAxB,EAAkCC,MAAlC,QAAgD,MAAhD;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1C,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAAb,CAAjB;AACA,MAAMC,OAAO,GAAGJ,IAAI,CAACK,aAAL,CAAmB,YAAnB,CAAhB,CAF0C,CAG1C;;AAEAH,EAAAA,QAAQ,CACLI,IADH,CACQN,IADR,EACc,GADd,EACmB;AAAEO,IAAAA,OAAO,EAAE,MAAX;AAAmBC,IAAAA,SAAS,EAAE,CAA9B;AAAiCP,IAAAA,KAAK,EAALA,KAAjC;AAAwCQ,IAAAA,IAAI,EAAEX,MAAM,CAACY;AAArD,GADnB,EAEGJ,IAFH,CAEQF,OAFR,EAEiB,IAFjB,EAEuB;AAAEI,IAAAA,SAAS,EAAE,CAAb;AAAgBG,IAAAA,CAAC,EAAE,EAAnB;AAAuBF,IAAAA,IAAI,EAAEX,MAAM,CAACc;AAApC,GAFvB,EAL0C,CAQxC;;AAEF,SAAOV,QAAP;AACD,CAXD;;AAaA,IAAMW,eAAe,GAAG,SAAlBA,eAAkB,CAACb,IAAD,EAAOC,KAAP,EAAiB;AACvC,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAAb,CAAjB;AACA,MAAMC,OAAO,GAAGJ,IAAI,CAACc,gBAAL,CAAsB,yBAAtB,CAAhB;AAEAZ,EAAAA,QAAQ,CACLI,IADH,CACQN,IADR,EACc,CADd,EACiB;AAAEO,IAAAA,OAAO,EAAE,MAAX;AAAmBC,IAAAA,SAAS,EAAE,CAA9B;AAAiCP,IAAAA,KAAK,EAALA;AAAjC,GADjB,EAEGc,WAFH,CAEeX,OAFf,EAEwB,KAFxB,EAE+B;AAAEI,IAAAA,SAAS,EAAE,CAAb;AAAgBQ,IAAAA,CAAC,EAAE,CAAC,EAApB;AAAwBP,IAAAA,IAAI,EAAEX,MAAM,CAACmB;AAArC,GAF/B,EAE+E,KAF/E;AAIA,SAAOf,QAAP;AACD,CATD;;AAWA,OAAO,IAAMgB,IAAI,GAAG,SAAPA,IAAO,CAACC,QAAD,EAAWnB,IAAX,EAAiBoB,OAAjB,EAA6B;AAC/C,MAAMnB,KAAK,GAAGmB,OAAO,GAAG,CAAH,GAAO,GAA5B;AACA,MAAIlB,QAAJ;AAEA,MAAIiB,QAAQ,KAAK,GAAjB,EACEjB,QAAQ,GAAGW,eAAe,CAACb,IAAD,EAAOC,KAAP,CAA1B,CADF,KAGEC,QAAQ,GAAGH,kBAAkB,CAACC,IAAD,EAAOC,KAAP,CAA7B;AAEFoB,EAAAA,MAAM,CACHC,WADH,CAEGC,IAFH,CAEQ;AAAA,WAAMC,qBAAqB,CAAC;AAAA,aAAMtB,QAAQ,CAACgB,IAAT,EAAN;AAAA,KAAD,CAA3B;AAAA,GAFR;AAGD,CAZM;AAcP,OAAO,IAAMO,IAAI,GAAG,SAAPA,IAAO,CAACzB,IAAD,EAAU;AAC5B,MAAME,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAAb,CAAjB;AAEAD,EAAAA,QAAQ,CAACwB,EAAT,CAAY1B,IAAZ,EAAkB,IAAlB,EAAwB;AAAEQ,IAAAA,SAAS,EAAE,CAAb;AAAgBC,IAAAA,IAAI,EAAEX,MAAM,CAACmB;AAA7B,GAAxB;AACAf,EAAAA,QAAQ,CAACgB,IAAT;AACD,CALM","sourcesContent":["import { TimelineMax as Timeline, Power1 } from 'gsap';\n\nconst getDefaultTimeline = (node, delay) => {\n  const timeline = new Timeline({ paused: true });\n  const content = node.querySelector('.container');\n  //const contentInner1 = node.querySelectorAll('.carousel, .row, .col, .card');\n\n  timeline\n    .from(node, 0.3, { display: 'none', autoAlpha: 0, delay, ease: Power1.easeIn })\n    .from(content, 0.15, { autoAlpha: 0, y: 25, ease: Power1.easeInOut })\n    //.from(contentInner1, 0.15, { autoAlpha: 0, delay: 0.15, ease: Power1.easeIn });\n\n  return timeline;\n}\n\nconst getHomeTimeline = (node, delay) => {\n  const timeline = new Timeline({ paused: true });\n  const content = node.querySelectorAll('h1, h4, h5, p, .contact');\n\n  timeline\n    .from(node, 0, { display: 'none', autoAlpha: 0, delay })\n    .staggerFrom(content, 0.375, { autoAlpha: 0, x: -25, ease: Power1.easeOut }, 0.125);\n\n  return timeline;\n}\n\nexport const play = (pathname, node, appears) => {\n  const delay = appears ? 0 : 0.5;\n  let timeline\n\n  if (pathname === '/')\n    timeline = getHomeTimeline(node, delay);\n  else\n    timeline = getDefaultTimeline(node, delay);\n\n  window\n    .loadPromise\n    .then(() => requestAnimationFrame(() => timeline.play()))\n}\n\nexport const exit = (node) => {\n  const timeline = new Timeline({ paused: true });\n\n  timeline.to(node, 0.15, { autoAlpha: 0, ease: Power1.easeOut });\n  timeline.play();\n}"]},"metadata":{},"sourceType":"module"}